# Python assistant to run different Applications on windows

import speech_recognition as sr
import pyttsx3
import os
import subprocess
import webbrowser

# Initialize the recognizer
r = sr.Recognizer()

# Function to convert text to
# speech

def SpeakText(command):

    # Initialize the engine
    engine = pyttsx3.init()
    engine.say(command)
    engine.runAndWait()


print("Tell me what should I run for you : ", end='')

# Loop infinitely for user to
# speak
pyttsx3.speak("Hi I'm Lucky, Welcome to my windows tools")
print("Say options to view menu", end='\n')
print("Say exit or quit, whenever the job is done", end='\n')
while True:
    # Exception handling to handle
    # exceptions at the runtime
    pyttsx3.speak("How could I help you")
    print('\nWrite "Hey" for text input or press enter to Say')
    hey = input()
    if ("Hey" in hey):
        print("Write...")
        q = input()
    elif ("exit" in hey) or ("quit" in hey):
        print("Terminating.....")
        break
    else:
        print("Say'Must include Lucky in command'...")
        try:
            # use the microphone as source for input.
            with sr.Microphone() as source2:
                # wait for a second to let the recognizer
                # adjust the energy threshold based on
                # the surrounding noise level
                r.adjust_for_ambient_noise(source2, duration=0.3)
            # listens for the user's input
                audio2 = r.listen(source2)
            # Using ggogle to recognize audio
                MyText = "..."
                MyText = r.recognize_google(audio2)

                print(MyText)
                SpeakText(MyText)
        except sr.RequestError as e:
            print("Could not request results; {0}".format(e))
        except sr.UnknownValueError:
            print("unknown error occured")

        q = MyText

    p = q.lower()

    if ("lucky" in p or "Hey" in hey):
        if (" not " in p) or ("don't" in p) or ("do not" in p):
            print("Plz not include words like not, don't and do not")
            pyttsx3.speak("Plz not include words like not, don't and do not")
        elif ("how are you" in p):
            pyttsx3.speak("I'm feeling great to help you")
            print("I'm feeling great to help you")
        # elif ("wait" in p):
        elif ("options" in p):
            print("""
Calculator
Check Disk Utility
Chrome
Control Panel
Date and Time Properties
Disk Partition Manager
Documents (open 'My Documents' folder)
Downloads (open 'Downloads' folder)
DVD Player
Edit Environment Variables
Facebook
Firefox Browser
Firewall Control Panel
Folders Properties
Keyboard Properties
Microsoft Excel(May need to add path)
Microsoft Power Point(May need to add path)
Microsoft Word(May need to add path)
Mouse Properties
MS Paint
Notepad
On Screen Keyboard
Resource Monitor
Shut Down Windows
Sound Recorder
Sound Volume
ssh server(using putty)
System Information
Task Manager
Time
WhatsApp Web
Windows Explorer
Windows Update
WordPad
VirtualBox""")
        elif (("run" in p) or ("launch" in p) or ("execute" in p) or ("open" in p) or ("show" in p) or ("display" in p) or ("play" in p) or ("close" in p) or ("edit" in p) or ("see" in p) or ("open" in p) or ("check" in p) or ("change" in p) or ("set" in p) or ("tell" in p)):
            if (("chrome" in p) or ("browser" in p) or ("google" in p)):
                os.system("START chrome")
                pyttsx3.speak("Opening Chrome")
            elif (("putty" in p) or ("ssh" in p)):
                print("Is putty installed on your computer(y/n)")
                ch = input()
                if (ch == "n") or (ch == "N"):
                    print("Shall I open the website to download putty software(y/n))")
                    agree = input()
                    if agree == 'y' or agree == "Y":
                        webbrowser.open("https://www.putty.org/")
                elif (ch == 'y') or (ch == "Y"):
                    result = subprocess.getoutput("where putty.exe")
                    print("Enter ip")
                    ip = input()
                    print("Enter user name")
                    user = input()
                    print("Enter port no.(by default 22)")
                    port = input()
                    subprocess.getoutput(
                        '"{}" -ssh {}@{} {}'.format(result, user, ip, port))
            elif ("facebook" in p):
                os.system("START https://www.facebook.com/login/")
                pyttsx3.speak("Opening facebook")
            elif ("gmail" in p):
                os.system("START https://mail.google.com/mail")
                pyttsx3.speak("Opening gmail")
            elif ("whatsappweb" in p) or ("whatsapp web" in p):
                os.system("START https://web.whatsapp.com/")
                pyttsx3.speak("Opening whatsapp web")
            elif ("firefox" in p) or ("mozilla" in p):
                os.system("firefox")
                pyttsx3.speak("Opening firefox")
            elif (("notepad" in p) or ("editor" in p)):
                os.system("START notepad")
                pyttsx3.speak("Opening Notepad")
            elif (("calculator" in p) or ("calculate" in p) or ("calculation" in p)):
                os.system("START calc")
                pyttsx3.speak("Opening Calculator")
            elif ((("check" in p) and ("disk" in p)) or ("chkdsk" in p)):
                os.system("START chkdsk")
                pyttsx3.speak("Opening checkdisk utility")
            elif ("control panel" in p):
                os.system("START control")
                pyttsx3.speak("Opening control panel")
            elif (("disk" in p) and ("partition" in p) or ("diskpart" in p)):
                os.system("START diskpart")
                pyttsx3.speak("Opening diskpart")
            elif (("documents" in p) or ("document" in p)):
                os.system("START explorer Documents")
                pyttsx3.speak("Opening documents folder")
            elif ("folders properties" in p):
                os.system("START control folders")
                pyttsx3.speak("Opening folder control")
            elif ("paint" in p):
                os.system("START mspaint")
                pyttsx3.speak("Opening m s paint")
            elif ("mouse properties" in p):
                os.system("START control mouse")
                pyttsx3.speak("Opening mouse properties")
            elif ("excel" in p):
                os.system("START Excel")
                pyttsx3.speak("Opening excel")
            elif (("powerpoint" in p) or ("power point" in p)):
                os.system("START powerpnt")
                pyttsx3.speak("Opening powerpoint")
            elif (("ms word" in p) or ("msword" in p) or ("microsoft word" in p)):
                os.system("START winword")
                pyttsx3.speak("Opening ms word")
            elif ("on screen" in p) and ("keyboard" in p):
                os.system("START osk")
                pyttsx3.speak("Opening on screen keyboard")
            elif ("resource monitor" in p):
                os.system("START resmon")
                pyttsx3.speak("Opening resource monitor")
            elif (("sound recorder" in p) or (("record" in p) and ("sound" in p))):
                os.system("START soundrecorder")
                pyttsx3.speak("Opening sound recorder")
            elif ("sound" in p) and ("volume" in p):
                os.system("START sndvol")
                pyttsx3.speak("Opening sound volume control")
            elif ("system information" in p):
                os.system("START msinfo32")
                pyttsx3.speak("Opening system information")
            elif (("task manager" in p) or ("taskmgr" in p)):
                os.system("START taskmgr")
                pyttsx3.speak("Opening task manager")
            elif ("explorer" in p):
                os.system("START explorer.exe")
                pyttsx3.speak("Opening explorer")
            elif ("windows update" in p):
                os.system("START wuapp")
                pyttsx3.speak("Opening windows update")
            elif (("wordpad" in p) or ("word pad" in p)):
                os.system("START write")
            elif (("downloads" in p) or ("download" in p)):
                os.system("START explorer Downloads")
                pyttsx3.speak("Opening downloads folder")
            elif (("virtualbox" in p) or ("virtual box" in p)):
                os.system("START VirtualBox")
                pyttsx3.speak("Opening VirtualBox")
            elif ("player" in p):
                os.system("START dvdplay")
                pyttsx3.speak("Opening dvd player")
            elif ("firewall" in p):
                os.system("START firewall.cpl")
                pyttsx3.speak("Opening firewall panel")
            elif ("environment variables" in p) or ("environmental variables" in p) or ("environment variable" in p) or ("environmental variable" in p):
                os.system("START SystemPropertiesAdvanced")
                pyttsx3.speak("Opening Advanced System properties")
            elif ("keyboard" in p) and ("properties" in p):
                os.system("START control keyboard")
                pyttsx3.speak("Opening keyboard control")
            elif ("date" in p):
                os.system("date /t")
            elif ("time" in p):
                os.system("time /t")
            elif ("date and time properties" in p) or (("date" in p) or ("time" in p) and ("properties" in p)):
                os.system("START timedate.cpl")
                pyttsx3.speak("Opening date and time properties")
            elif (("shut down" in p) or ("turn off" in p)):
                pyttsx3.speak("Shutting down")
                os.system("shutdown")
            else:
                pyttsx3.speak("Wrong input, Say options to view menu")
                print('dont support')
        elif (("shut down" in p) or ("turn off" in p)):
            os.system("shutdown")
        elif ("exit" in p) or ("quit" in p):
            print("Terminating.....")
            break
        else:
            pyttsx3.speak("Wrong input, Say options to view menu")
            print('dont support')

        if("Hey" in hey):
            pyttsx3.speak("write quit or exit whenever the work is done")
        else:
            pyttsx3.speak("You can say quit or exit whenever the work is done")

    else:
        if ("exit" in p) or ("quit" in p):
            print("Terminating.....")
            break

        elif ("Hey" not in p):
            pyttsx3.speak("Say Lucky along with your command")
